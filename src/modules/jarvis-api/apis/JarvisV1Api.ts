/* tslint:disable */
/* eslint-disable */
/**
 * Javis smart stock analysis API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RpcStatus,
  V1CreateOrderRequest,
  V1CreateOrderResponse,
  V1CreateTransactionRequest,
  V1CreateTransactionResponse,
  V1CreateUserRequest,
  V1CreateUserResponse,
  V1DeletePickedStocksResponse,
  V1GetBalanceResponse,
  V1GetStakeConcentrationRequest,
  V1GetStakeConcentrationResponse,
  V1InsertPickedStocksRequest,
  V1InsertPickedStocksResponse,
  V1ListCategoriesResponse,
  V1ListDailyCloseRequest,
  V1ListDailyCloseResponse,
  V1ListOrderRequest,
  V1ListOrderResponse,
  V1ListPickedStocksResponse,
  V1ListSelectionRequest,
  V1ListSelectionResponse,
  V1ListStockRequest,
  V1ListStockResponse,
  V1ListThreePrimaryRequest,
  V1ListThreePrimaryResponse,
  V1ListUsersResponse,
  V1LoginRequest,
  V1LoginResponse,
  V1LogoutResponse,
} from '../models/index';
import {
    RpcStatusFromJSON,
    RpcStatusToJSON,
    V1CreateOrderRequestFromJSON,
    V1CreateOrderRequestToJSON,
    V1CreateOrderResponseFromJSON,
    V1CreateOrderResponseToJSON,
    V1CreateTransactionRequestFromJSON,
    V1CreateTransactionRequestToJSON,
    V1CreateTransactionResponseFromJSON,
    V1CreateTransactionResponseToJSON,
    V1CreateUserRequestFromJSON,
    V1CreateUserRequestToJSON,
    V1CreateUserResponseFromJSON,
    V1CreateUserResponseToJSON,
    V1DeletePickedStocksResponseFromJSON,
    V1DeletePickedStocksResponseToJSON,
    V1GetBalanceResponseFromJSON,
    V1GetBalanceResponseToJSON,
    V1GetStakeConcentrationRequestFromJSON,
    V1GetStakeConcentrationRequestToJSON,
    V1GetStakeConcentrationResponseFromJSON,
    V1GetStakeConcentrationResponseToJSON,
    V1InsertPickedStocksRequestFromJSON,
    V1InsertPickedStocksRequestToJSON,
    V1InsertPickedStocksResponseFromJSON,
    V1InsertPickedStocksResponseToJSON,
    V1ListCategoriesResponseFromJSON,
    V1ListCategoriesResponseToJSON,
    V1ListDailyCloseRequestFromJSON,
    V1ListDailyCloseRequestToJSON,
    V1ListDailyCloseResponseFromJSON,
    V1ListDailyCloseResponseToJSON,
    V1ListOrderRequestFromJSON,
    V1ListOrderRequestToJSON,
    V1ListOrderResponseFromJSON,
    V1ListOrderResponseToJSON,
    V1ListPickedStocksResponseFromJSON,
    V1ListPickedStocksResponseToJSON,
    V1ListSelectionRequestFromJSON,
    V1ListSelectionRequestToJSON,
    V1ListSelectionResponseFromJSON,
    V1ListSelectionResponseToJSON,
    V1ListStockRequestFromJSON,
    V1ListStockRequestToJSON,
    V1ListStockResponseFromJSON,
    V1ListStockResponseToJSON,
    V1ListThreePrimaryRequestFromJSON,
    V1ListThreePrimaryRequestToJSON,
    V1ListThreePrimaryResponseFromJSON,
    V1ListThreePrimaryResponseToJSON,
    V1ListUsersResponseFromJSON,
    V1ListUsersResponseToJSON,
    V1LoginRequestFromJSON,
    V1LoginRequestToJSON,
    V1LoginResponseFromJSON,
    V1LoginResponseToJSON,
    V1LogoutResponseFromJSON,
    V1LogoutResponseToJSON,
} from '../models/index';

export interface JarvisV1CreateOrderRequest {
    body: V1CreateOrderRequest;
}

export interface JarvisV1CreateTransactionRequest {
    body: V1CreateTransactionRequest;
}

export interface JarvisV1CreateUserRequest {
    body: V1CreateUserRequest;
}

export interface JarvisV1DeletePickedStocksRequest {
    stockID: string;
}

export interface JarvisV1GetStakeConcentrationRequest {
    body: V1GetStakeConcentrationRequest;
}

export interface JarvisV1InsertPickedStocksRequest {
    body: V1InsertPickedStocksRequest;
}

export interface JarvisV1ListDailyCloseRequest {
    body: V1ListDailyCloseRequest;
}

export interface JarvisV1ListOrdersRequest {
    body: V1ListOrderRequest;
}

export interface JarvisV1ListSelectionsRequest {
    body: V1ListSelectionRequest;
}

export interface JarvisV1ListStocksRequest {
    body: V1ListStockRequest;
}

export interface JarvisV1ListThreePrimaryRequest {
    body: V1ListThreePrimaryRequest;
}

export interface JarvisV1ListUsersRequest {
    offset?: number;
    limit?: number;
}

export interface JarvisV1LoginRequest {
    body: V1LoginRequest;
}

export interface JarvisV1LogoutRequest {
    body: object;
}

/**
 * 
 */
export class JarvisV1Api extends runtime.BaseAPI {

    /**
     */
    async jarvisV1CreateOrderRaw(requestParameters: JarvisV1CreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CreateOrderResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling jarvisV1CreateOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/orders`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateOrderRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CreateOrderResponseFromJSON(jsonValue));
    }

    /**
     */
    async jarvisV1CreateOrder(requestParameters: JarvisV1CreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CreateOrderResponse> {
        const response = await this.jarvisV1CreateOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async jarvisV1CreateTransactionRaw(requestParameters: JarvisV1CreateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CreateTransactionResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling jarvisV1CreateTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/transactions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateTransactionRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CreateTransactionResponseFromJSON(jsonValue));
    }

    /**
     */
    async jarvisV1CreateTransaction(requestParameters: JarvisV1CreateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CreateTransactionResponse> {
        const response = await this.jarvisV1CreateTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async jarvisV1CreateUserRaw(requestParameters: JarvisV1CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CreateUserResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling jarvisV1CreateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateUserRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CreateUserResponseFromJSON(jsonValue));
    }

    /**
     */
    async jarvisV1CreateUser(requestParameters: JarvisV1CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CreateUserResponse> {
        const response = await this.jarvisV1CreateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async jarvisV1DeletePickedStocksRaw(requestParameters: JarvisV1DeletePickedStocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DeletePickedStocksResponse>> {
        if (requestParameters.stockID === null || requestParameters.stockID === undefined) {
            throw new runtime.RequiredError('stockID','Required parameter requestParameters.stockID was null or undefined when calling jarvisV1DeletePickedStocks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/pickedstocks/{stockID}`.replace(`{${"stockID"}}`, encodeURIComponent(String(requestParameters.stockID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DeletePickedStocksResponseFromJSON(jsonValue));
    }

    /**
     */
    async jarvisV1DeletePickedStocks(requestParameters: JarvisV1DeletePickedStocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DeletePickedStocksResponse> {
        const response = await this.jarvisV1DeletePickedStocksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async jarvisV1GetBalanceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetBalanceResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/balances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetBalanceResponseFromJSON(jsonValue));
    }

    /**
     */
    async jarvisV1GetBalance(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetBalanceResponse> {
        const response = await this.jarvisV1GetBalanceRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async jarvisV1GetStakeConcentrationRaw(requestParameters: JarvisV1GetStakeConcentrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetStakeConcentrationResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling jarvisV1GetStakeConcentration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/stakeconcentration`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1GetStakeConcentrationRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetStakeConcentrationResponseFromJSON(jsonValue));
    }

    /**
     */
    async jarvisV1GetStakeConcentration(requestParameters: JarvisV1GetStakeConcentrationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetStakeConcentrationResponse> {
        const response = await this.jarvisV1GetStakeConcentrationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async jarvisV1InsertPickedStocksRaw(requestParameters: JarvisV1InsertPickedStocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1InsertPickedStocksResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling jarvisV1InsertPickedStocks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/pickedstocks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1InsertPickedStocksRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1InsertPickedStocksResponseFromJSON(jsonValue));
    }

    /**
     */
    async jarvisV1InsertPickedStocks(requestParameters: JarvisV1InsertPickedStocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1InsertPickedStocksResponse> {
        const response = await this.jarvisV1InsertPickedStocksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async jarvisV1ListCategoriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListCategoriesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListCategoriesResponseFromJSON(jsonValue));
    }

    /**
     */
    async jarvisV1ListCategories(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListCategoriesResponse> {
        const response = await this.jarvisV1ListCategoriesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async jarvisV1ListDailyCloseRaw(requestParameters: JarvisV1ListDailyCloseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListDailyCloseResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling jarvisV1ListDailyClose.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/dailycloses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1ListDailyCloseRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListDailyCloseResponseFromJSON(jsonValue));
    }

    /**
     */
    async jarvisV1ListDailyClose(requestParameters: JarvisV1ListDailyCloseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListDailyCloseResponse> {
        const response = await this.jarvisV1ListDailyCloseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async jarvisV1ListOrdersRaw(requestParameters: JarvisV1ListOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListOrderResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling jarvisV1ListOrders.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/orders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1ListOrderRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListOrderResponseFromJSON(jsonValue));
    }

    /**
     */
    async jarvisV1ListOrders(requestParameters: JarvisV1ListOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListOrderResponse> {
        const response = await this.jarvisV1ListOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async jarvisV1ListPickedStocksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListPickedStocksResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/pickedstocks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListPickedStocksResponseFromJSON(jsonValue));
    }

    /**
     */
    async jarvisV1ListPickedStocks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListPickedStocksResponse> {
        const response = await this.jarvisV1ListPickedStocksRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async jarvisV1ListSelectionsRaw(requestParameters: JarvisV1ListSelectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListSelectionResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling jarvisV1ListSelections.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/selections`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1ListSelectionRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListSelectionResponseFromJSON(jsonValue));
    }

    /**
     */
    async jarvisV1ListSelections(requestParameters: JarvisV1ListSelectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListSelectionResponse> {
        const response = await this.jarvisV1ListSelectionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async jarvisV1ListStocksRaw(requestParameters: JarvisV1ListStocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListStockResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling jarvisV1ListStocks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/stocks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1ListStockRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListStockResponseFromJSON(jsonValue));
    }

    /**
     */
    async jarvisV1ListStocks(requestParameters: JarvisV1ListStocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListStockResponse> {
        const response = await this.jarvisV1ListStocksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async jarvisV1ListThreePrimaryRaw(requestParameters: JarvisV1ListThreePrimaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListThreePrimaryResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling jarvisV1ListThreePrimary.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/threeprimary`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1ListThreePrimaryRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListThreePrimaryResponseFromJSON(jsonValue));
    }

    /**
     */
    async jarvisV1ListThreePrimary(requestParameters: JarvisV1ListThreePrimaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListThreePrimaryResponse> {
        const response = await this.jarvisV1ListThreePrimaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async jarvisV1ListUsersRaw(requestParameters: JarvisV1ListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListUsersResponse>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListUsersResponseFromJSON(jsonValue));
    }

    /**
     */
    async jarvisV1ListUsers(requestParameters: JarvisV1ListUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListUsersResponse> {
        const response = await this.jarvisV1ListUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async jarvisV1LoginRaw(requestParameters: JarvisV1LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1LoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling jarvisV1Login.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1LoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1LoginResponseFromJSON(jsonValue));
    }

    /**
     */
    async jarvisV1Login(requestParameters: JarvisV1LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1LoginResponse> {
        const response = await this.jarvisV1LoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async jarvisV1LogoutRaw(requestParameters: JarvisV1LogoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1LogoutResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling jarvisV1Logout.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1LogoutResponseFromJSON(jsonValue));
    }

    /**
     */
    async jarvisV1Logout(requestParameters: JarvisV1LogoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1LogoutResponse> {
        const response = await this.jarvisV1LogoutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
