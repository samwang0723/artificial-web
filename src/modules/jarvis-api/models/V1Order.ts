/* tslint:disable */
/* eslint-disable */
/**
 * Javis smart stock analysis API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface V1Order
 */
export interface V1Order {
    /**
     * 
     * @type {string}
     * @memberof V1Order
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof V1Order
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof V1Order
     */
    updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof V1Order
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Order
     */
    stockID?: string;
    /**
     * 
     * @type {number}
     * @memberof V1Order
     */
    buyPrice?: number;
    /**
     * 
     * @type {number}
     * @memberof V1Order
     */
    sellPrice?: number;
    /**
     * 
     * @type {string}
     * @memberof V1Order
     */
    buyQuantity?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Order
     */
    sellQuantity?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Order
     */
    buyExchangeDate?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Order
     */
    sellExchangeDate?: string;
    /**
     * 
     * @type {number}
     * @memberof V1Order
     */
    profitablePrice?: number;
    /**
     * 
     * @type {number}
     * @memberof V1Order
     */
    profitLoss?: number;
    /**
     * 
     * @type {number}
     * @memberof V1Order
     */
    profitLossPercent?: number;
    /**
     * 
     * @type {string}
     * @memberof V1Order
     */
    stockName?: string;
    /**
     * 
     * @type {number}
     * @memberof V1Order
     */
    currentPrice?: number;
}

/**
 * Check if a given object implements the V1Order interface.
 */
export function instanceOfV1Order(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1OrderFromJSON(json: any): V1Order {
    return V1OrderFromJSONTyped(json, false);
}

export function V1OrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Order {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'status': !exists(json, 'status') ? undefined : json['status'],
        'stockID': !exists(json, 'stockID') ? undefined : json['stockID'],
        'buyPrice': !exists(json, 'buyPrice') ? undefined : json['buyPrice'],
        'sellPrice': !exists(json, 'sellPrice') ? undefined : json['sellPrice'],
        'buyQuantity': !exists(json, 'buyQuantity') ? undefined : json['buyQuantity'],
        'sellQuantity': !exists(json, 'sellQuantity') ? undefined : json['sellQuantity'],
        'buyExchangeDate': !exists(json, 'buyExchangeDate') ? undefined : json['buyExchangeDate'],
        'sellExchangeDate': !exists(json, 'sellExchangeDate') ? undefined : json['sellExchangeDate'],
        'profitablePrice': !exists(json, 'profitablePrice') ? undefined : json['profitablePrice'],
        'profitLoss': !exists(json, 'profitLoss') ? undefined : json['profitLoss'],
        'profitLossPercent': !exists(json, 'profitLossPercent') ? undefined : json['profitLossPercent'],
        'stockName': !exists(json, 'stockName') ? undefined : json['stockName'],
        'currentPrice': !exists(json, 'currentPrice') ? undefined : json['currentPrice'],
    };
}

export function V1OrderToJSON(value?: V1Order | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'status': value.status,
        'stockID': value.stockID,
        'buyPrice': value.buyPrice,
        'sellPrice': value.sellPrice,
        'buyQuantity': value.buyQuantity,
        'sellQuantity': value.sellQuantity,
        'buyExchangeDate': value.buyExchangeDate,
        'sellExchangeDate': value.sellExchangeDate,
        'profitablePrice': value.profitablePrice,
        'profitLoss': value.profitLoss,
        'profitLossPercent': value.profitLossPercent,
        'stockName': value.stockName,
        'currentPrice': value.currentPrice,
    };
}

